openapi: 3.0.1
info:
  description: |-
    Responsible for managing users and roles.

     Following [semantic versioning](https://semver.org/).
  title: Base App API
  version: 1.0.0-SNAPSHOT
servers:
  - description: Generated server url
    url: http://localhost:8080
security:
  - jwt: [ ]
paths:
  /api/auth/login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialsDto'
        required: true
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/JwtDto'
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      security: [ ]
      tags:
        - auth
      x-contentType: application/json
      x-accepts: application/json
  /api/auth/users/self/change-password:
    put:
      operationId: changeMyPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordDto'
        required: true
      responses:
        "200":
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      tags:
        - auth
      x-contentType: application/json
      x-accepts: application/json
  /api/users:
    post:
      operationId: create-user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
        required: true
      responses:
        "200":
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      security:
        - jwt: [ ]
        - { }
      tags:
        - users
      x-contentType: application/json
      x-accepts: application/json
  /api/users/self:
    delete:
      operationId: removeMe
      responses:
        "200":
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      tags:
        - users
      x-accepts: application/json
    get:
      operationId: getMe
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetUserDto'
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      tags:
        - users
      x-accepts: application/json
    put:
      operationId: changeMe
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserDto'
        required: true
      responses:
        "200":
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      tags:
        - users
      x-contentType: application/json
      x-accepts: application/json
  /api/users/{email}:
    delete:
      operationId: removeUser
      parameters:
        - explode: false
          in: path
          name: email
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      tags:
        - users
      x-accepts: application/json
    get:
      operationId: getUser
      parameters:
        - explode: false
          in: path
          name: email
          required: true
          schema:
            type: string
          style: simple
      responses:
        "200":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/GetUserDto'
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      tags:
        - users
      x-accepts: application/json
    put:
      operationId: changeUser
      parameters:
        - explode: false
          in: path
          name: email
          required: true
          schema:
            type: string
          style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserDto'
        required: true
      responses:
        "200":
          description: OK
        "401":
          content: { }
          description: Unauthorized
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        "403":
          content: { }
          description: Forbidden
          headers:
            WWW-Authenticate:
              description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
              explode: false
              schema:
                type: string
              style: simple
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
          description: other error responses
      tags:
        - users
      x-contentType: application/json
      x-accepts: application/json
components:
  responses:
    "401":
      content: { }
      description: Unauthorized
      headers:
        WWW-Authenticate:
          description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
          explode: false
          schema:
            type: string
          style: simple
    "403":
      content: { }
      description: Forbidden
      headers:
        WWW-Authenticate:
          description: '[RFC 6750#3](https://tools.ietf.org/html/rfc6750#section-3)'
          explode: false
          schema:
            type: string
          style: simple
    default:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
      description: other error responses
  schemas:
    ErrorResponse:
      description: |+
        * 400:

          * 2 - Email already exists

          * 3 - Old password does not match

          * 4 - Invalid request format

        * 404:

          * 1 - User not found

        * 500:

          * 0 - Internal error

      properties:
        code:
          enum:
            - 0
            - 1
            - 2
            - 3
            - 4
          format: int32
          type: integer
          x-enum-varnames:
            - INTERNAL_ERROR
            - USER_NOT_FOUND
            - EMAIL_ALREADY_EXISTS
            - OLD_PASSWORD_DOES_NOT_MATCH
            - INVALID_REQUEST
          x-enum-descriptions:
            - Internal error
            - User not found
            - Email already exists
            - Old password does not match
            - Invalid request format
        invalidRequestParameters:
          description: May be present when the code is 4
          items:
            $ref: '#/components/schemas/InvalidRequestParameter'
          type: array
        message:
          type: string
      required:
        - code
        - message
      type: object
    InvalidRequestParameter:
      description: May be present when the code is 4
      properties:
        message:
          type: string
        name:
          type: string
      required:
        - message
        - name
      type: object
    ChangeUserDto:
      description: at least one field must be present
      example:
        firstName: firstName
        lastName: lastName
      properties:
        firstName:
          type: string
        lastName:
          type: string
      type: object
    ChangePasswordDto:
      example:
        oldPassword: oldPassword
        newPassword: newPassword
      properties:
        newPassword:
          type: string
        oldPassword:
          type: string
      required:
        - newPassword
        - oldPassword
      type: object
    CreateUserDto:
      example:
        firstName: firstName
        lastName: lastName
        password: password
        email: email
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        password:
          type: string
      required:
        - email
        - firstName
        - lastName
        - password
      type: object
    CredentialsDto:
      example:
        password: password
        email: email
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
      type: object
    JwtDto:
      example:
        jwt: jwt
      properties:
        jwt:
          type: string
      required:
        - jwt
      type: object
    GetUserDto:
      example:
        firstName: firstName
        lastName: lastName
        email: email
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
      required:
        - email
        - firstName
        - lastName
      type: object
  securitySchemes:
    jwt:
      bearerFormat: JWT
      description: Authenticate via `/api/auth/login`
      scheme: bearer
      type: http

